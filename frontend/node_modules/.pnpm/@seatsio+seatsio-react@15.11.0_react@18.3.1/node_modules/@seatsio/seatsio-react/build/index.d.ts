import * as _seatsio_seatsio_types from '@seatsio/seatsio-types';
import { CommonConfigOptions, SeatingChart, EventManager, Region, Seatsio, ChartDesigner, ChartDesignerConfigOptions, EventManagerConfigOptions, ChartRendererConfigOptions } from '@seatsio/seatsio-types';
export * from '@seatsio/seatsio-types';
export { isBooth, isGeneralAdmission, isSeat, isTable } from '@seatsio/seatsio-types';
import * as React from 'react';

type EmbeddableProps<T> = {
    onRenderStarted?: (chart: SeatingChart | EventManager) => void;
    chartJsUrl?: string;
    region: Region;
} & T;
declare abstract class Embeddable<T extends CommonConfigOptions> extends React.Component<EmbeddableProps<T>> {
    private container;
    private chart;
    private firstRender;
    private static seatsioBundles;
    static defaultProps: {
        chartJsUrl: string;
    };
    constructor(props: EmbeddableProps<T>);
    abstract createChart(seatsio: Seatsio, config: T): SeatingChart | EventManager | ChartDesigner;
    componentDidMount(): void;
    componentDidUpdate(prevProps: EmbeddableProps<T>): void;
    getChartUrl(): string;
    createAndRenderChart(): Promise<void>;
    extractConfigFromProps(): any;
    componentWillUnmount(): void;
    destroyChart(): void;
    loadSeatsio(): Promise<Seatsio>;
    render(): React.ReactNode;
}

declare class SeatsioDesigner extends Embeddable<ChartDesignerConfigOptions> {
    createChart(seatsio: Seatsio, config: ChartDesignerConfigOptions): _seatsio_seatsio_types.ChartDesigner;
}

declare class SeatsioEventManager extends Embeddable<EventManagerConfigOptions> {
    createChart(seatsio: Seatsio, config: EventManagerConfigOptions): _seatsio_seatsio_types.EventManager;
}

declare class SeatsioSeatingChart extends Embeddable<ChartRendererConfigOptions> {
    createChart(seatsio: Seatsio, config: ChartRendererConfigOptions): _seatsio_seatsio_types.SeatingChart;
}

export { SeatsioDesigner, SeatsioEventManager, SeatsioSeatingChart };
