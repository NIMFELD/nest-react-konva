// src/main/Embeddable.tsx
import * as React from "react";

// src/main/util.ts
var didPropsChange = (prevProps, nextProps) => {
  if (Object.keys(prevProps).length !== Object.keys(nextProps).length) {
    return true;
  }
  return Object.keys(nextProps).some((propName) => {
    let prevValue = prevProps[propName];
    let nextValue = nextProps[propName];
    if (prevValue && nextValue) {
      if (typeof prevValue === "function" && typeof nextValue === "function") {
        return prevValue.toString() !== nextValue.toString();
      }
      if (typeof prevValue === "object" && typeof nextValue === "object") {
        return didPropsChange(prevValue, nextValue);
      }
    }
    return prevValue !== nextValue;
  });
};

// src/main/Embeddable.tsx
var _Embeddable = class _Embeddable extends React.Component {
  constructor(props) {
    super(props);
    this.container = React.createRef();
    this.firstRender = true;
  }
  componentDidMount() {
    if (!_Embeddable.seatsioBundles[this.getChartUrl()] || this.firstRender) {
      this.createAndRenderChart();
      this.firstRender = false;
    }
  }
  componentDidUpdate(prevProps) {
    if (this.chart) {
      this.chart.config = this.extractConfigFromProps();
      if (didPropsChange(this.props, prevProps)) {
        this.destroyChart();
        this.createAndRenderChart();
      }
    }
  }
  getChartUrl() {
    return this.props.chartJsUrl.replace("{region}", this.props.region);
  }
  async createAndRenderChart() {
    const seatsio2 = await this.loadSeatsio();
    const config = this.extractConfigFromProps();
    this.chart = this.createChart(seatsio2, config).render();
    if (this.props.onRenderStarted) {
      this.props.onRenderStarted(this.chart);
    }
  }
  extractConfigFromProps() {
    let { chartJsUrl, divId, onRenderStarted, region, ...config } = this.props;
    config.container = this.container.current;
    return config;
  }
  componentWillUnmount() {
    this.destroyChart();
  }
  destroyChart() {
    if (this.chart && this.chart.state !== "DESTROYED") {
      this.chart.destroy();
    }
  }
  loadSeatsio() {
    const chartUrl = this.getChartUrl();
    if (!_Embeddable.seatsioBundles[chartUrl]) {
      _Embeddable.seatsioBundles[chartUrl] = new Promise((resolve, reject) => {
        const script = document.head.appendChild(document.createElement("script"));
        window.seatsio = void 0;
        script.onload = () => {
          resolve(seatsio);
        };
        script.onerror = () => reject(`Could not load ${script.src}`);
        script.src = chartUrl;
      });
    }
    return _Embeddable.seatsioBundles[chartUrl];
  }
  render() {
    return /* @__PURE__ */ React.createElement("div", { ref: this.container, style: { "height": "100%", "width": "100%" } });
  }
};
_Embeddable.seatsioBundles = {};
_Embeddable.defaultProps = {
  chartJsUrl: "https://cdn-{region}.seatsio.net/chart.js"
};
var Embeddable = _Embeddable;

// src/main/SeatsioDesigner.tsx
var SeatsioDesigner = class extends Embeddable {
  createChart(seatsio2, config) {
    return new seatsio2.SeatingChartDesigner(config);
  }
};

// src/main/SeatsioEventManager.tsx
var SeatsioEventManager = class extends Embeddable {
  createChart(seatsio2, config) {
    return new seatsio2.EventManager(config);
  }
};

// src/main/SeatsioSeatingChart.tsx
var SeatsioSeatingChart = class extends Embeddable {
  createChart(seatsio2, config) {
    return new seatsio2.SeatingChart(config);
  }
};

// src/main/index.ts
import { isBooth, isGeneralAdmission, isSeat, isTable } from "@seatsio/seatsio-types";
export {
  SeatsioDesigner,
  SeatsioEventManager,
  SeatsioSeatingChart,
  isBooth,
  isGeneralAdmission,
  isSeat,
  isTable
};
//# sourceMappingURL=index.mjs.map