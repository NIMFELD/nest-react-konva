{"version":3,"sources":["../src/main/Embeddable.tsx","../src/main/util.ts","../src/main/SeatsioDesigner.tsx","../src/main/SeatsioEventManager.tsx","../src/main/SeatsioSeatingChart.tsx","../src/main/index.ts"],"sourcesContent":["import * as React from 'react'\nimport {didPropsChange} from './util'\nimport {ChartDesigner, CommonConfigOptions, EventManager, Region, SeatingChart, Seatsio} from '@seatsio/seatsio-types'\n\nexport type EmbeddableProps<T> = {\n    onRenderStarted?: (chart: SeatingChart | EventManager) => void\n    chartJsUrl?: string\n    region: Region\n} & T\n\nexport default abstract class Embeddable<T extends CommonConfigOptions> extends React.Component<EmbeddableProps<T>> {\n    private container: React.RefObject<HTMLDivElement>\n    private chart: SeatingChart\n    private firstRender: boolean\n\n    private static seatsioBundles: { [key: string]: Promise<Seatsio> } = {}\n\n    static defaultProps = {\n        chartJsUrl: 'https://cdn-{region}.seatsio.net/chart.js'\n    }\n\n    constructor(props: EmbeddableProps<T>) {\n        super(props);\n        this.container = React.createRef()\n        this.firstRender = true\n    }\n\n    abstract createChart (seatsio: Seatsio, config: T): SeatingChart | EventManager | ChartDesigner\n\n    componentDidMount () {\n        if (!Embeddable.seatsioBundles[this.getChartUrl()] || this.firstRender) {\n            this.createAndRenderChart()\n            this.firstRender = false\n        }\n    }\n\n    componentDidUpdate (prevProps: EmbeddableProps<T>) {\n        if(this.chart) {\n            // @ts-ignore\n            this.chart.config = this.extractConfigFromProps()\n            if (didPropsChange(this.props, prevProps)) {\n                this.destroyChart()\n                this.createAndRenderChart()\n            }\n        }\n    }\n\n    getChartUrl () {\n        return this.props.chartJsUrl.replace('{region}', this.props.region)\n    }\n\n    async createAndRenderChart () {\n        const seatsio = await this.loadSeatsio()\n        const config = this.extractConfigFromProps()\n        this.chart = this.createChart(seatsio, config).render()\n        if (this.props.onRenderStarted) {\n            this.props.onRenderStarted(this.chart)\n        }\n    }\n\n    extractConfigFromProps (): any {\n        let { chartJsUrl, divId, onRenderStarted, region, ...config } = this.props\n        // @ts-ignore\n        config.container = this.container.current\n        return config\n    }\n\n    componentWillUnmount () {\n        this.destroyChart()\n    }\n\n    destroyChart () {\n        if (this.chart && (this.chart as any).state !== 'DESTROYED') {\n            this.chart.destroy()\n        }\n    }\n\n    loadSeatsio (): Promise<Seatsio> {\n        const chartUrl = this.getChartUrl()\n        if (!Embeddable.seatsioBundles[chartUrl]) {\n            Embeddable.seatsioBundles[chartUrl] = new Promise<Seatsio>((resolve, reject) => {\n                const script = document.head.appendChild(document.createElement('script'))\n                // Seatsio global is not replaced if already present, which would cause the wrong region bundle to resolve when changing region\n                window.seatsio = undefined\n                script.onload = () => {\n                    resolve(seatsio)\n                }\n                script.onerror = () => reject(`Could not load ${script.src}`)\n                script.src = chartUrl\n            })\n        }\n\n        return Embeddable.seatsioBundles[chartUrl]\n    }\n\n    render (): React.ReactNode {\n        return (\n            <div ref={this.container as unknown as React.RefObject<HTMLDivElement>} style={{'height': '100%', 'width': '100%'}} />\n        )\n    }\n}\n","import {Booth, GeneralAdmissionArea, InteractiveSection, Seat, SelectableObject, Table} from \"@seatsio/seatsio-types\"\n\nexport const didPropsChange = <P extends { [key: string]: any}>(prevProps: P, nextProps: P): boolean => {\n    if (Object.keys(prevProps).length !== Object.keys(nextProps).length) {\n        return true\n    }\n    return Object.keys(nextProps).some((propName: string) => {\n        let prevValue = prevProps[propName]\n        let nextValue = nextProps[propName]\n        if (prevValue && nextValue) {\n            if (typeof prevValue === 'function' && typeof nextValue === 'function') {\n                return prevValue.toString() !== nextValue.toString()\n            }\n            if (typeof prevValue === 'object' && typeof nextValue === 'object') {\n                return didPropsChange(prevValue, nextValue)\n            }\n        }\n        return prevValue !== nextValue\n    })\n}\n","import Embeddable from './Embeddable'\nimport { ChartDesignerConfigOptions, Seatsio } from '@seatsio/seatsio-types'\n\nexport default class SeatsioDesigner extends Embeddable<ChartDesignerConfigOptions> {\n    createChart (seatsio: Seatsio, config: ChartDesignerConfigOptions) {\n        return new seatsio.SeatingChartDesigner(config)\n    }\n}","import { EventManagerConfigOptions, Seatsio } from '@seatsio/seatsio-types'\nimport Embeddable from './Embeddable'\n\nexport default class SeatsioEventManager extends Embeddable<EventManagerConfigOptions> {\n    createChart (seatsio: Seatsio, config: EventManagerConfigOptions) {\n        return new seatsio.EventManager(config)\n    }\n}","import { ChartRendererConfigOptions, Seatsio } from '@seatsio/seatsio-types'\nimport Embeddable from './Embeddable'\n\nexport default class SeatsioSeatingChart extends Embeddable<ChartRendererConfigOptions> {\n    createChart (seatsio: Seatsio, config: ChartRendererConfigOptions) {\n        return new seatsio.SeatingChart(config)\n    }\n}","export { default as SeatsioDesigner } from './SeatsioDesigner'\nexport { default as SeatsioEventManager } from './SeatsioEventManager'\nexport { default as SeatsioSeatingChart } from './SeatsioSeatingChart'\nexport { isBooth, isGeneralAdmission, isSeat, isTable } from '@seatsio/seatsio-types'\nexport type * from '@seatsio/seatsio-types'\n"],"mappings":"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","names":["seatsio","seatsio","seatsio","seatsio"]}